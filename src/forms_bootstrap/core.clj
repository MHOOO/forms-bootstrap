(ns forms-bootstrap.core
  (:use net.cgrand.enlive-html
        noir.core
        [sandbar.validation :only (if-valid)])
  (:require [noir.validation :as vali]
            [clojure.string :as string]
            [noir.session :as session]
            [noir.response :as response]))

(def form-template "../resources/forms-template.html")

;;UTILITIES
(defn remove-spaces
  "Remove spaces from a string"
  [input]
  (string/replace input " " ""))

(defn collectify
  "Takes in one argument, and returns it if its already a vector,
  otherwise it makes it into one."
  [x]
  (if (sequential? x) x [x]))

(defn first-word
  "Takes an input string and returns the first word in it"
  [x]
  (clojure.core/get (string/split x #"\s") 0))

(defn handle-error-css
  "Used within a snippet to add 'error' to the class of an html element, if appropriate."
  [errors]
  (if (peek errors)
     (add-class "error")
     identity))
  

;; SNIPPETS  

;;Grabs the whole form from the template, sets the action, replaces
;;the entire contents with fields, and appends a submit button.
;;Fields here is a sequence of stuff generated by all of the
;;defsnippets below, one for each form element 
(defsnippet basic-form
  form-template
  [:form]              
  [{:keys [action fields submitter class enctype]
    :or {class "form-horizontal"}}]  
  [:form] (do-> (set-attr :action action)
                (set-attr :class class)
                (if (nil? enctype)
                  identity
                  (set-attr :enctype enctype))
                (content fields)   
                (append submitter)))

;; Generates a txt or password input form field for a given map.
;; inputs: name label type size default errors
;; ex: [:name "namehere" :label "labelhere" :type "text"
;;      :size "xlarge" :errors ["some error"] :default "john"] 
(defsnippet input-field
  form-template
  [:div.input-field]
  [{:keys [id hidden name label class type size errors default disabled placeholder span] 
    :or {size "xlarge"
         type "text"
         default ""}}]
  [:.input-field] (do->
                   (if id
                     (set-attr :id id)
                     identity)
                   (if hidden
                     (add-class "hidden")
                     identity)) 
  [:label] (do-> (content label) 
                 (set-attr :for name))
  [:div.controls :input] (do->
                          (set-attr :name name)
                          (set-attr :type type)
                          (set-attr :class size)
                          (set-attr :placeholder placeholder)
                          (if (= disabled true)
                            (set-attr :disabled "")
                            identity)
                          (set-attr :value default)
                          (if (not (empty? class))
                            (set-attr :class class) 
                            identity))    
  [:div.input-field] (handle-error-css errors)  
  [:span.help-inline]  (cond
                         (peek errors)
                         (content (peek errors))
                         (not (nil? span) )
                         (content span)
                         :else
                         (content "")))
 
;;Creates a text-area form element
;;ex: [:name "namehere" :label "labelhere" :type "text-area"
;;     :size "xlarge" :rows "3" :default "defaultstuff"]
(defsnippet text-area-field 
  form-template
  [:div.text-area]
  [{:keys [name label size rows errors default]
    :or {size "xlarge"
         rows "3"
         default ""}}]
  [:label] (do-> (set-attr :for name)
                 (content label))
  [:textarea] (do-> (set-attr :class size)
                    (set-attr :name name)
                    (set-attr :rows rows)
                    (content default))
  [:div.text-area] (handle-error-css errors)
  [:span.help-inline]  (if-let [err (peek errors)]
                         (content err)
                         (content)))

;;Creates a select (dropdown) form element with the given values 
;;Ex: {:type "select" :name "cars" :size "xlarge" :label "Cars"
;;     :inputs [["volvo" "Volvo"] ["honda" "Honda"]]}
(defsnippet dropdown-menu
  form-template                       
  [:div.select-dropdown] 
  [{:keys [name size label inputs errors default type]
    :or {size "xlarge"}}]
  [:label] (do-> (content label) 
                 (set-attr :for name))
  [:select] (do-> (set-attr :name name
                            :class size
                            :id name)
                  (if (= type "select inline")
                    identity
                    (wrap :div {:class "controls"})))
  [:select :option] (clone-for [[value value-label] inputs]
                               (do-> (set-attr :value value)
                                     (if (= default value)
                                       (set-attr :selected "selected")  
                                       identity)
                                     (content value-label)))
  [:div.select-dropdown] (handle-error-css errors)
  [:span.help-inline]  (if-let [err (peek errors)]
                         (content err)
                         (content))) 

;;Creates a radio or checkbox form list with the given attributes
;; ex: {:type "select" :name "cars" :size "xlarge" :label "Cars"
;;      :inputs [["volvo" "Volvo"] ["honda" "Honda"]]}
(defsnippet checkbox-or-radio
  form-template                       
  [:.checkbox-or-radio] 
  [{:keys [name label inputs note type errors default class]}]
  [:div.checkbox-or-radio]  (add-class class)
  [:label.control-label] (do-> (content label)  
                               (set-attr :name name))
  [:div.controls :label] (clone-for [[value value-label] inputs] 
                                    [:label] (add-class type)
                                    [:input] (do-> (set-attr :type (first-word type)
                                                             :name name
                                                             :value value
                                                             :id (remove-spaces
                                                                  value-label))
                                                   (content value-label)
                                                   (if (contains?
                                                        (set (collectify default))
                                                        value)
                                                     (set-attr :checked "checked")
                                                     identity)))
  [:div.checkbox-or-radio] (handle-error-css errors)
  [:span.help-block] (content (or (peek errors)
                                  note)))
   
;;Creates a file input button
(defsnippet file-input
  form-template
  [:div.file-input]
  [{:keys [name label errors]}]
  [:label] (content label)
  [:input] (set-attr :name name)
  [:div.file-input] (handle-error-css errors)
  [:span.help-inline] (if-let [err (peek errors)]
                        (content err)
                        (content)))

;;Creates a submit button with a specified label (value)
;;TODO: add support for different types of buttons within <div class="actions">
(defsnippet make-submit-button  
  form-template
  [:div#submit_button]
  [label cancel-link] 
  [:button] (content label)
  [:a] (if cancel-link
         (if (= cancel-link "modal") 
           (set-attr :data-dismiss "modal")
           (set-attr :href cancel-link))
         (content ""))) 

;;HELPERS

(defn make-field
  "Takes a single map representing a form element's attributes and
  routes it to the correct snippet based on its type. Supports input
  fields, text areas, dropdown menus, checkboxes, radios, and file
  inputs. Ex: {:type 'text' :name 'username' :label 'Username' :errors
  ['Incorrect username'] :default ''}"
  [m]
  (case (first-word (:type m))
    "text"       (input-field m)
    "password"   (input-field (dissoc m :default)) ;;dont want to keep passwords
    "text-area"  (text-area-field m)
    "select"     (dropdown-menu m)
    "radio"      (checkbox-or-radio m)
    "checkbox"   (checkbox-or-radio m)
    "file-input" (file-input m)))


;;  ex: ({:type "text" :name "username" :label "Username"}
;;       {:type "pass" :name "password" :label "Password"})
;; after we merge with errors / defs, one field could look like:
;; {:type "text" :name "username" :errors ["username cannot be blank"] :default ""}
;;Submit-Label is the label on the submit button - default is "Submit"
(defn make-form
  "Returns a form with the specified action, fields, and submit
  button. Fields is a sequence of maps, each containing a form element's
  attributes."
  [& {:keys [action class fields submit-label
             errors-and-defaults enctype cancel-link]
      :or {class "form-horizontal"}}]
  (basic-form {:action action
               :class class
               :enctype  enctype
               :fields   (map (fn [{:keys [name] :as m}]
                                (make-field
                                 (merge m
                                        (get errors-and-defaults
                                             (keyword
                                              ;;replace [] in case its
                                              ;;the name of a form
                                              ;;element that can take
                                              ;;on mutliple values (ie checkbox)
                                              (string/replace name "[]" ""))))))
                              fields) 
               :submitter (when submit-label
                            (make-submit-button submit-label cancel-link))}))
